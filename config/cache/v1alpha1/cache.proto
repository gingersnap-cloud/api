syntax = "proto3";
package gingersnap.config.cache.v1alpha1;
// TODO: use the k8s type for quantity. Check the Java side
// import "apimachinery/pkg/api/resource/quantity.proto";
import "config/cache/v1alpha1/rules.proto";
option java_multiple_files = true;

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the desired configuration for a Cache. Only DB Cache Service is supported atm
message CacheSpec {
  // Resource profile for the cache provider
  CacheDeploymentSpec deployment = 1;
  // Resource profile for the db-syncer
  DBSyncerDeploymentSpec db_syncer = 2;
  // DatasourceRef or a ServiceBindingRef (TODO clarify)
  DataSourceSpec data_source = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the spec of the cache provider
message CacheDeploymentSpec {
  // +kubebuilder:validation:Enum=LOCAL;CLUSTER
  // The type of Cache deployment
  CacheDeploymentType type = 1;
  // Resource profile for cache pods
  Resources resources = 2;
  // Max number of replicas for type CLUSTER
  int32 replicas = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:validation:Type=string
// The type of cache deployment
enum CacheDeploymentType {
  LOCAL = 0;
  CLUSTER = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the spec of the db-syncer deployment
message DBSyncerDeploymentSpec {
  // Resource profile for db-syncer pods
  Resources resources = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a resources profile required for a workload
message Resources {
  ResourceQuantity requests = 1;
  ResourceQuantity limits = 2;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a resource quantities
message ResourceQuantity {
  // TODO: use the k8s type for quantity. Check the Java side
  // k8s.io.apimachinery.pkg.api.resource.Quantity memory = 1;
  // Memory quantity
  string memory = 1;
  // TODO: use the k8s type for quantity. Check the Java side
  // k8s.io.apimachinery.pkg.api.resource.Quantity cpu = 2;
  // CPU quantity
  string cpu = 2;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a data source connection. A map is available for passing implementation specific
// properties.
message DataSourceSpec {
  // +kubebuilder:validation:Enum=POSTGRES_14;MYSQL_8;SQL_SERVER_2019
  // Type and version of the underlaying DB. Needed to decide which drivers need to be used
  optional DBType db_type = 1;
  // Additional properties. DB specific
  map<string, string> connection_properties = 2;
  // Reference to a local secret containing DB connection details.
  LocalObjectReference secret_ref = 3;
  // Reference to ServiceBinding provider
  ServiceRef service_provider_ref = 4;
}

// LocalObjectRef contains enough information to let you locate the referenced object inside the same namespace.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message LocalObjectReference {
  // Resource name
  string name = 1;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes a ServiceBinding provider in the Cache namespace
message ServiceRef {
  // API version of the referent.
  string api_version = 1;
  // Kind of the referent.
  string kind = 2;
  // Name of the referent.
  string name = 3;
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:validation:Type=string
// Type of the database in format DBTYPE_VERSION
enum DBType {
  POSTGRES_14 = 0;
  MYSQL_8 = 1;
  SQL_SERVER_2019 = 2;
}

// Document representation of a cache and all the related rules
message CacheConf {
  CacheSpec cache_spec = 1;
  // map of all the Eager rules attached to this cache. Key should be of the for
  // namespace.name (needs to be a string, NamespacedRef cannot be used).
  map<string, EagerCacheRuleSpec> eager_cache_rule_specs = 2;
  // map of all the Lazy rules attached to this cache. Key should be of the for
  // namespace.name.
  map<string, LazyCacheRuleSpec> lazy_cache_rule_specs = 3;
}
